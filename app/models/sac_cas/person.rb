# frozen_string_literal: true

#  Copyright (c) 2012-2023, Schweizer Alpen-Club. This file is part of
#  hitobito_sac_cas and licensed under the Affero General Public License version 3
#  or later. See the COPYING file at the top-level directory or at
#  https://github.com/hitobito/hitobito_sac_cas.


module SacCas::Person
  extend ActiveSupport::Concern

  included do
    Person::INTERNAL_ATTRS << :membership_verify_token

    validates :membership_verify_token, uniqueness: { allow_blank: true }

    # membership_number is generated by a sequence, see
    # db/migrate/20230929124606_change_people_membership_number_default.rb
    # We dont want to allow to change it, so we make it readonly.
    attr_readonly :membership_number

    # We need to reload the record after creation to get the membership_number which is set by
    # the database. We do not need to do this if we allow to set the membership_number manually
    # and the record is actually created with a manually specified membership_number.
    after_create :reload, unless: :manually_set_membership_number?
  end

  class_methods do
    # This method is called from the validates_by_schema gem.
    # The column exceptions for validates_by_schema are defined in the Person base class and we
    # can not change them from here. So we override the method here and add the membership_number.
    def ignored_columns_for_validates_by_schema
      super + ['membership_number']
    end

    # Calling this method with a block will allow you to set the membership_number manually
    # for the duration of the block.
    # **This is not thread-safe**, so use it only in an isolated context
    # (e.g. in the import rake task).
    def with_manual_membership_number
      # Store the original value of the class variable so we can restore it after the block.
      original_value = @allow_manual_membership_number
      @allow_manual_membership_number = true
      # Yield to the block and return the result. Before returning, restore the original value.
      yield.tap do
        @allow_manual_membership_number = original_value
      end
    end
  end

  def manually_set_membership_number?
    self.class.instance_variable_get('@allow_manual_membership_number') &&
      # If we did not specify a membership_number, rails won't know that it was changed.
      # So we know if rails knows about it, it was set manually.
      membership_number_previously_changed?
  end

  # Rails stubbornly tries to set a default value for a new record because the column is
  # not nullable. To prevent this, we just ignore setter calls on new records. The value
  # will be set by the database on insert.
  # To override this behaviour, wrap the call in a with_manual_membership_number block.
  def membership_number=(value)
    return unless self.class.instance_variable_get('@allow_manual_membership_number')

    super
  end

  def membership_years
    "#{first_name}#{last_name}".size
  end

  def init_membership_verify_token!
    token = SecureRandom.base58(24)
    update!(membership_verify_token: token)
    token
  end



end
